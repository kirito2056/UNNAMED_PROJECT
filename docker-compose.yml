services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: friend_ai_backend
    env_file:
      - .env
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./backend/app:/app/app  # Mount the app directory for hot-reloading. / 핫리로딩을 위해 앱 디렉토리 마운트
    command: uvicorn app.main:app --host ${API_HOST:-0.0.0.0} --port ${API_PORT:-8000} --reload
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - friend_ai_net

  # PostgreSQL database for user data and chat history
  # 사용자 데이터 및 채팅 기록을 위한 PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: friend_ai_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-friend_ai}
      POSTGRES_USER: ${POSTGRES_USER:-friend_ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-friend_ai_password}
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql  # 초기화 스크립트
    restart: unless-stopped
    networks:
      - friend_ai_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-friend_ai_user} -d ${POSTGRES_DB:-friend_ai}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Placeholder for Milvus vector database (will be activated later)
  # Milvus 벡터 데이터베이스를 위한 플레이스홀더 (추후 활성화 예정)
  # milvus:
  #   image: milvusdb/milvus:v2.3.0-standalone
  #   container_name: friend_ai_milvus
  #   ports:
  #     - "19530:19530"  # Milvus port
  #     - "9091:9091"    # Milvus metrics port
  #   volumes:
  #     - milvus_data:/var/lib/milvus
  #   restart: unless-stopped
  #   networks:
  #     - friend_ai_net

networks:
  friend_ai_net:
    driver: bridge

volumes:
  postgres_data:
  milvus_data:

# To run: docker-compose up --build
# 실행 명령어: docker-compose up --build
